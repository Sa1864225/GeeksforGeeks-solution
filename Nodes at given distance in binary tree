
class node{
        int d;
        Node root;
        public  node(Node root,int d){
            this.root=root;
            this.d=d;
        }
    }
 class Solution
{
    
    
    public static void parents(Node root,int target,HashMap<Node,Node> map){
        if(root!=null){
            
                
            if(root.left!=null){
                map.put(root.left,root);
                parents(root.left,target,map);
            }
            if(root.right!=null){
                map.put(root.right,root);
                parents(root.right,target,map);
            }
        }
    }
    public static Node source(Node root, int target){
        if(root!=null){
            if(root.data==target)
                return root;
            Node x=source(root.left,target);
            if(x!=null)
                return x;
            return source(root.right,target);
        }
        return null;
    }
    public static ArrayList<Integer> KDistanceNodes(Node root, int target , int k)
    {
        HashMap<Node,Node> map = new HashMap<>();
        map.put(root,null);
        parents(root,target,map);
        ArrayList<Integer> ans = new ArrayList<>();
        HashMap<Node,Boolean> visited = new HashMap<>();
         
         Queue<node> queue = new LinkedList<>();
         int l=1;
         queue.add(new node(source(root,target),0));
         visited.put(source(root,target),true);
        while(l>0){
           
            node x=queue.remove();
            l-=1;
            if(x.d==k)
                ans.add(x.root.data);
                
            else if(x.d<k){
                if(x.root.left!=null&&visited.get(x.root.left)==null){
                    queue.add(new node(x.root.left,x.d+1));
                    l+=1;
                    visited.put(x.root.left,true);
                }
                if(x.root.right!=null&&visited.get(x.root.right)==null){
                    queue.add(new node(x.root.right,x.d+1));
                    l+=1;
                    visited.put(x.root.right,true);
                }
                if(map.get(x.root)!=null&&visited.get(map.get(x.root))==null){
                    queue.add(new node(map.get(x.root),x.d+1));
                    l+=1;
                    visited.put(map.get(x.root),true);
                }
            }
            
                
        }
        Collections.sort(ans);
        return ans;
    }
};
